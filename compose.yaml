services:
    php:
        image: ${IMAGES_PREFIX:-}app-php
        restart: unless-stopped
        environment:
            SERVER_NAME: ${SERVER_NAME:-localhost}, php:80
            # Run "composer require symfony/orm-pack" to install and configure Doctrine ORM
            DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-17}&charset=${POSTGRES_CHARSET:-utf8}
        volumes:
            - caddy_data:/data
            - caddy_config:/config
        ports:
            # HTTP
            - target: 80
              published: ${HTTP_PORT:-80}
              protocol: tcp
            # HTTPS
            - target: 443
              published: ${HTTPS_PORT:-443}
              protocol: tcp
            # HTTP/3
            - target: 443
              published: ${HTTP3_PORT:-443}
              protocol: udp

    ###> doctrine/doctrine-bundle ###
    database:
        image: postgres:${POSTGRES_VERSION:-17}-alpine
        ports:
            - "5432:5432"
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-app}
            # You should definitely change the password in production
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
            POSTGRES_USER: ${POSTGRES_USER:-app}
        healthcheck:
            test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
            timeout: 5s
            retries: 5
            start_period: 60s
        volumes:
            - database_data:/var/lib/postgresql/data:rw
            # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
            # - ./docker/db/data:/var/lib/postgresql/data:rw
    ###< doctrine/doctrine-bundle ###

    minio:
        image: minio/minio:latest
        restart: unless-stopped
        command: server /data --console-address ":9001"
        ports:
            - "9000:9000" # API
            - "9001:9001" # Web Console
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-!ChangeMe!}
        volumes:
            - minio_data:/data
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
            interval: 30s
            timeout: 20s
            retries: 3

    # MinIO client for bucket creation
    createbuckets:
        image: minio/mc:latest
        depends_on:
            - minio
        restart: on-failure
        entrypoint: >
            /bin/sh -c "
            echo 'Waiting for MinIO to be ready...';
            sleep 2;
            echo 'Configuring MinIO buckets...';
            /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER:-minio} ${MINIO_ROOT_PASSWORD:-!ChangeMe!};
            /usr/bin/mc mb --ignore-existing myminio/${MINIO_BUCKET:-files};
            /usr/bin/mc anonymous set download myminio/${MINIO_BUCKET:-files};
            echo 'MinIO buckets configured successfully';
            exit 0;
            "

volumes:
    caddy_data:
    caddy_config:

    ###> doctrine/doctrine-bundle ###
    database_data:
    ###< doctrine/doctrine-bundle ###

    minio_data:
