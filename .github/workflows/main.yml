# .github/workflows/main.yml
name: Main Deployment

on:
    push:
        branches: [main]

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.4'
                  extensions: mbstring, intl, xml, pgsql, pdo_pgsql
                  coverage: none

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '23'
                  cache: 'yarn'

            - name: Validate composer.json and composer.lock
              run: composer validate --strict

            - name: Install PHP dependencies
              run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader

            - name: Install JS dependencies
              run: yarn install

            - name: Build frontend assets
              run: yarn build

            - name: Deploy to Hostinger VPS
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.HOSTINGER_HOST }}
                  username: ${{ secrets.HOSTINGER_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: ${{ secrets.SSH_PORT || 22 }}
                  script: |
                      # Navigate to the project directory
                      cd ${{ secrets.PROJECT_PATH }}

                      # Pull the latest changes from production branch
                      git fetch origin production
                      git checkout production
                      git pull origin production

                      # Create .env.prod with secrets
                      cat > .env.prod << EOF
                      APP_ENV=prod
                      APP_DEBUG=0
                      POSTGRES_USER=${{ secrets.POSTGRES_USER }}
                      POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
                      MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
                      MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
                      MINIO_ENDPOINT=${{ secrets.MINIO_ENDPOINT }}
                      MINIO_BUCKET=${{ secrets.MINIO_BUCKET }}
                      MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }}
                      MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }}
                      EOF

                      # Build and start the containers in production mode
                      docker compose -f compose.yaml -f compose.prod.yaml down
                      docker compose -f compose.yaml -f compose.prod.yaml --env-file .env.prod up -d --build

                      # Run migrations if needed
                      docker compose -f compose.yaml -f compose.prod.yaml exec php php bin/console doctrine:migrations:migrate --no-interaction

                      # Warmup cache instead of clearing
                      docker compose -f compose.yaml -f compose.prod.yaml exec -T php php bin/console cache:warmup --env=prod
